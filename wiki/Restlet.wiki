#summary A Description of the eXist/Restlet Integration

= 1. Introduction =

The eXist-restlet subproject provides an integration with the [http://www.restlet.org Restlet] project.  It provides a simple way to integrate an embedded version of eXist into a web application.

The handling of services, web interfaces, etc. is all handled via regular Restlet
code and there is a special "exist" protocol for talking to the internal database as if
it is its own service via the Client restlet API.

= 2. Examples =

== 2.1 Starting the Database ==

{{{
   XMLDB xmldb = new XMLDB(new File("conf.xml"));
   xmldb.start();
}}}


== 2.2 A Web Component for eXist Requests ==

{{{
public class WebComponent extends Component {
   
   public WebComponent(String hostname,String ipAddress, int port) {
      
      // ------------------
      // Add the connectors
      // ------------------
      getServers().add(Protocol.HTTP, ipAddress, port);
      getClients().add(Protocol.FILE);
      getClients().add(XMLDBResource.EXIST);
      
      // ---------------
      // Add the virtual host
      // ---------------
      VirtualHost host = new VirtualHost(getContext());
      host.setHostDomain(hostname);
      host.setHostPort("80|" + Integer.toString(port));
      
      host.attach(new XMLDBApplication(getContext()));
      
      getHosts().add(host);
      
   }
   
}
}}}

== 2.3 Getting a Document ==


{{{
   Client client = new Client(Protocol.valueOf("exist"));
   Response response = client.get("exist:///foo.xml");
}}}

== 2.4 Storing a Document ==

{{{
   Client client = new Client(Protocol.valueOf("exist"));
   Response response =client.put("exist:///foo.xml",new StringRepresentation("<foo/>",MediaType.APPLICATION_XML));
}}}

== 2.5 Querying ==

{{{
   Client client = new Client(Protocol.valueOf("exist"));
   Response response = client.post("exist:///",new StringRepresentation("//foo",MediaType.valueOf("application/xquery"))
}}}

= 3. Building =

The restlet integration relies upon the embedded version of [http://www.exist-db.org eXist].  You can build the embedded version by the following instructions

  # Checkout the `trunk/eXist` and `trunk/embedded` directories of eXist from eXist's subversion
  # Build eXist.
  # Execute the `import-exist` ant target.
  # Build the embedded project via the `jar` ant target.

Once you have the embedded version of eXist, you can build the restlet project by:

  # Checkout the `trunk/restlet` from this project's subversion.
  # Execute the `import-embedded` ant target.  You'll probably need to set the `embedded.dir` parameter to directory of your embedded version of eXist.
  # Build the project with the `jar` ant target.

All of these projects (eXist, embedded eXist, and this project) are also [http://www.netbeans.org Netbeans] projects.

= 4. API =

The Restlet integration makes using eXist as an embedded database very simple.  The
minimum you need to do is start the database and then access eXist with the "exist" protocol via the `Client` class.

You can only start the database engine per process which is accomplished by:

{{{
   XMLDB xmldb = new XMLDB(new File("conf.xml"));
   xmldb.start();
}}}

The file passed into the constructor is the path to the eXist configuration file (an XML document).  This is a regular eXist configuration.  All the features of eXist with the exception of the HTTP services are available via this configuration.

Once you have the database started, you can access exist via REST methods:

  * A PUT request stores a document into the database.
  * A GET request retrieves a document representation.
  * A POST request submits an XQuery to the database.
  * A DELETE request removes a document or collection from the database.
  * A HEAD request returns the modification time of a document.

== 4.1 PUT ==

== 4.2 GET ==

== 4.3 POST ==

== 4.4 DELETE ==

== 4.5 PUT ==

== 4.6 Other Class ==

